/*
 * generated by Xtext 2.14.0
 */
grammar InternalKairosSystem;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.kairos.tuto.concretesyntax.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.kairos.tuto.concretesyntax.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.kairos.tuto.concretesyntax.xtext.services.KairosSystemGrammarAccess;

}

@parser::members {

 	private KairosSystemGrammarAccess grammarAccess;

    public InternalKairosSystemParser(TokenStream input, KairosSystemGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "KairosSystem";
   	}

   	@Override
   	protected KairosSystemGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleKairosSystem
entryRuleKairosSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKairosSystemRule()); }
	iv_ruleKairosSystem=ruleKairosSystem
	{ $current=$iv_ruleKairosSystem.current; }
	EOF;

// Rule KairosSystem
ruleKairosSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKairosSystemAccess().getKairosSystemAction_0(),
					$current);
			}
		)
		otherlv_1='KairosSystem'
		{
			newLeafNode(otherlv_1, grammarAccess.getKairosSystemAccess().getKairosSystemKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getKairosSystemAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKairosSystemRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getKairosSystemAccess().getOwnedActorsActorParserRuleCall_3_0());
				}
				lv_ownedActors_3_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKairosSystemRule());
					}
					add(
						$current,
						"ownedActors",
						lv_ownedActors_3_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getKairosSystemAccess().getOwnedConnectorsConnectorParserRuleCall_4_0());
				}
				lv_ownedConnectors_4_0=ruleConnector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKairosSystemRule());
					}
					add(
						$current,
						"ownedConnectors",
						lv_ownedConnectors_4_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.Connector");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActorAccess().getActorAction_0(),
					$current);
			}
		)
		otherlv_1='Actor'
		{
			newLeafNode(otherlv_1, grammarAccess.getActorAccess().getActorKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getActorAccess().getColonKeyword_2());
		}
		(
			otherlv_3='every'
			{
				newLeafNode(otherlv_3, grammarAccess.getActorAccess().getEveryKeyword_3_0());
			}
			(
				(
					lv_period_4_0=RULE_INT
					{
						newLeafNode(lv_period_4_0, grammarAccess.getActorAccess().getPeriodINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActorRule());
						}
						setWithLastConsumed(
							$current,
							"period",
							lv_period_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					set(
						$current,
						"name",
						lv_name_5_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getOwnedInputPortsInputPortParserRuleCall_6_0());
				}
				lv_ownedInputPorts_7_0=ruleInputPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					add(
						$current,
						"ownedInputPorts",
						lv_ownedInputPorts_7_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.InputPort");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getActorAccess().getOwnedOutputPortsOutputPortParserRuleCall_7_0());
				}
				lv_ownedOutputPorts_8_0=ruleOutputPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActorRule());
					}
					add(
						$current,
						"ownedOutputPorts",
						lv_ownedOutputPorts_8_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.OutputPort");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getActorAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	iv_ruleConnector=ruleConnector
	{ $current=$iv_ruleConnector.current; }
	EOF;

// Rule Connector
ruleConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Connector'
		{
			newLeafNode(otherlv_0, grammarAccess.getConnectorAccess().getConnectorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getConnectorAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3='from'
		{
			newLeafNode(otherlv_3, grammarAccess.getConnectorAccess().getFromKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getOutputportOutputPortCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getConnectorAccess().getToKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConnectorRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConnectorAccess().getInputportInputPortCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getConnectorAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleInputPort
entryRuleInputPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputPortRule()); }
	iv_ruleInputPort=ruleInputPort
	{ $current=$iv_ruleInputPort.current; }
	EOF;

// Rule InputPort
ruleInputPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputPortAccess().getInputPortAction_0(),
					$current);
			}
		)
		otherlv_1='In'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputPortAccess().getInKeyword_1());
		}
		otherlv_2='Port'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputPortAccess().getPortKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputPortAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputPortRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputPortAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			otherlv_5='connector'
			{
				newLeafNode(otherlv_5, grammarAccess.getInputPortAccess().getConnectorKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInputPortRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getInputPortAccess().getConnectorConnectorCrossReference_5_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getInputPortAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleOutputPort
entryRuleOutputPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputPortRule()); }
	iv_ruleOutputPort=ruleOutputPort
	{ $current=$iv_ruleOutputPort.current; }
	EOF;

// Rule OutputPort
ruleOutputPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputPortAccess().getOutputPortAction_0(),
					$current);
			}
		)
		otherlv_1='Out'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputPortAccess().getOutKeyword_1());
		}
		otherlv_2='Port'
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputPortAccess().getPortKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputPortAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputPortRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"fr.inria.kairos.tuto.concretesyntax.xtext.KairosSystem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputPortAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			otherlv_5='connector'
			{
				newLeafNode(otherlv_5, grammarAccess.getOutputPortAccess().getConnectorKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputPortRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getOutputPortAccess().getConnectorConnectorCrossReference_5_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getOutputPortAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
