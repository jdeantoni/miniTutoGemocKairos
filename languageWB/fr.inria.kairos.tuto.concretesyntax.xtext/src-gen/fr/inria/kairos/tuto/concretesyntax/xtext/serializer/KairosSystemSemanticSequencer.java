/*
 * generated by Xtext 2.14.0
 */
package fr.inria.kairos.tuto.concretesyntax.xtext.serializer;

import com.google.inject.Inject;
import fr.inria.kairos.tuto.concretesyntax.xtext.services.KairosSystemGrammarAccess;
import fr.inria.kairos.tuto.model.kairosTuto.Actor;
import fr.inria.kairos.tuto.model.kairosTuto.Connector;
import fr.inria.kairos.tuto.model.kairosTuto.InputPort;
import fr.inria.kairos.tuto.model.kairosTuto.KairosSystem;
import fr.inria.kairos.tuto.model.kairosTuto.KairosTutoPackage;
import fr.inria.kairos.tuto.model.kairosTuto.OutputPort;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class KairosSystemSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KairosSystemGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KairosTutoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KairosTutoPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case KairosTutoPackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case KairosTutoPackage.INPUT_PORT:
				sequence_InputPort(context, (InputPort) semanticObject); 
				return; 
			case KairosTutoPackage.KAIROS_SYSTEM:
				sequence_KairosSystem(context, (KairosSystem) semanticObject); 
				return; 
			case KairosTutoPackage.OUTPUT_PORT:
				sequence_OutputPort(context, (OutputPort) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (period=INT? name=EString ownedInputPorts+=InputPort* ownedOutputPorts+=OutputPort*)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     (name=EString outputport=[OutputPort|EString] inputport=[InputPort|EString])
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KairosTutoPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KairosTutoPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, KairosTutoPackage.Literals.CONNECTOR__OUTPUTPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KairosTutoPackage.Literals.CONNECTOR__OUTPUTPORT));
			if (transientValues.isValueTransient(semanticObject, KairosTutoPackage.Literals.CONNECTOR__INPUTPORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KairosTutoPackage.Literals.CONNECTOR__INPUTPORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConnectorAccess().getOutputportOutputPortEStringParserRuleCall_4_0_1(), semanticObject.eGet(KairosTutoPackage.Literals.CONNECTOR__OUTPUTPORT, false));
		feeder.accept(grammarAccess.getConnectorAccess().getInputportInputPortEStringParserRuleCall_6_0_1(), semanticObject.eGet(KairosTutoPackage.Literals.CONNECTOR__INPUTPORT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputPort returns InputPort
	 *
	 * Constraint:
	 *     (name=EString connector=[Connector|EString]?)
	 */
	protected void sequence_InputPort(ISerializationContext context, InputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KairosSystem returns KairosSystem
	 *
	 * Constraint:
	 *     (name=EString ownedActors+=Actor* ownedConnectors+=Connector*)
	 */
	protected void sequence_KairosSystem(ISerializationContext context, KairosSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OutputPort returns OutputPort
	 *
	 * Constraint:
	 *     (name=EString connector=[Connector|EString]?)
	 */
	protected void sequence_OutputPort(ISerializationContext context, OutputPort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
