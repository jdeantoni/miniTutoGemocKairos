/**
 * generated by Xtext 2.14.0
 */
package fr.inria.kairos.tuto.concretesyntax.xtext.formatting2;

import com.google.inject.Inject;
import fr.inria.kairos.tuto.concretesyntax.xtext.services.KairosSystemGrammarAccess;
import fr.inria.kairos.tuto.model.kairosTuto.Actor;
import fr.inria.kairos.tuto.model.kairosTuto.Connector;
import fr.inria.kairos.tuto.model.kairosTuto.InputPort;
import fr.inria.kairos.tuto.model.kairosTuto.KairosSystem;
import fr.inria.kairos.tuto.model.kairosTuto.OutputPort;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class KairosSystemFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private KairosSystemGrammarAccess _kairosSystemGrammarAccess;
  
  protected void _format(final KairosSystem kairosSystem, @Extension final IFormattableDocument document) {
    EList<Actor> _ownedActors = kairosSystem.getOwnedActors();
    for (final Actor actor : _ownedActors) {
      document.<Actor>format(actor);
    }
    EList<Connector> _ownedConnectors = kairosSystem.getOwnedConnectors();
    for (final Connector connector : _ownedConnectors) {
      document.<Connector>format(connector);
    }
  }
  
  protected void _format(final Actor actor, @Extension final IFormattableDocument document) {
    EList<InputPort> _ownedInputPorts = actor.getOwnedInputPorts();
    for (final InputPort inputPort : _ownedInputPorts) {
      document.<InputPort>format(inputPort);
    }
    EList<OutputPort> _ownedOutputPorts = actor.getOwnedOutputPorts();
    for (final OutputPort outputPort : _ownedOutputPorts) {
      document.<OutputPort>format(outputPort);
    }
  }
  
  public void format(final Object actor, final IFormattableDocument document) {
    if (actor instanceof XtextResource) {
      _format((XtextResource)actor, document);
      return;
    } else if (actor instanceof Actor) {
      _format((Actor)actor, document);
      return;
    } else if (actor instanceof KairosSystem) {
      _format((KairosSystem)actor, document);
      return;
    } else if (actor instanceof EObject) {
      _format((EObject)actor, document);
      return;
    } else if (actor == null) {
      _format((Void)null, document);
      return;
    } else if (actor != null) {
      _format(actor, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(actor, document).toString());
    }
  }
}
